version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:14-alpine
    container_name: astro-postgres
    environment:
      POSTGRES_DB: astro_bsm_portal
      POSTGRES_USER: astro_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/database:/docker-entrypoint-initdb.d
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U astro_user -d astro_bsm_portal"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Full-Stack Application (Backend serves Frontend)
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: astro-app
    environment:
      NODE_ENV: production
      PORT: 3001
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      POSTGRES_DB: astro_bsm_portal
      POSTGRES_USER: astro_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      SESSION_SECRET: ${SESSION_SECRET}
    ports:
      - "3001:3001"
    volumes:
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3001/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Nginx Reverse Proxy (Optional - for custom domain and SSL)
  nginx:
    image: nginx:alpine
    container_name: astro-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local

networks:
  default:
    name: astro-network